%YAML:1.0

#common parameters
imu_topic: "/imu0"
image_topic: "/cam0/image_raw"
lidar_topic: "/velodyne_points"
output_path: "/home/lenovo/output/ADVIO/"

# lidar to camera extrinsic
exRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.0250049,    -0.999688,   0.00068552,
           0.000937395, -0.000709336,   -0.999999,
           0.999687,   -0.0250042,  0.000954885]

#Translation from camera frame to imu frame, imu^T_cam
exTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.00428288, 0.019991, -0.00969694]


#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 720
image_height: 1280
distortion_parameters:
   k1: 0.0478
   k2: 0.0339
   p1: -0.00033
   p2: -0.00091
projection_parameters:
   fx: 1077.2
   fy: 1079.3
   cx: 362.145
   cy: 636.3873

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.9999763379093255, -0.004079205042965442, -0.005539287650170447,
           -0.004066386342107199, -0.9999890330121858, 0.0023234365646622014,
           -0.00554870467502187, -0.0023008567036498766, -0.9999819588046867]

#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.008977668364731128, 0.07557012320238939, -0.005545773942541918]

#feature traker paprameters
max_cnt: 250            # max feature number in feature tracking
min_dist: 15            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the worse performance
acc_n: 4.8e-03         # accelerometer measurement noise standard deviation. #0.2
gyr_n: 2.4e-03        # gyroscope measurement noise standard deviation.     #0.05
acc_w: 2.1e-04        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 5.1e-05      # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.79754     # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/lenovo/output/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
