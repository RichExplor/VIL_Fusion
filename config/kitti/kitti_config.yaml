%YAML:1.0

#common parameters
imu_topic: "/imu_raw"
image_topic: "/kitti/camera_gray_left/image_raw"
lidar_topic: "/points_raw"
output_path: "/home/lenovo/output/KITTI/"

# lidar to camera extrinsic
exRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [7.027555e-03, -9.999753e-01, 2.599616e-05,
           -2.254837e-03, -4.184312e-05, -9.999975e-01,
           9.999728e-01, 7.027479e-03, -2.255075e-03]

#Translation from camera frame to imu frame, imu^T_cam
exTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-7.137748e-03, -7.482656e-02, -3.336324e-01]


#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 1226
image_height: 370
distortion_parameters:
   k1: 0.0
   k2: 0.0
   p1: 0.0
   p2: 0.0
projection_parameters:
   fx: 7.070912e+02
   fy: 7.070912e+02
   cx: 6.018873e+02
   cy: 1.831104e+02

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.00781297, -0.0042792, 0.99996,
           -0.999859, -0.014868, 0.00774856, 
           0.0148343, -0.99988, -0.00439476] 

#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [1.1439, -0.312718, 0.726546]

#feature traker paprameters
max_cnt: 200            # max feature number in feature tracking
min_dist: 20            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the worse performance
acc_n: 0.08         # accelerometer measurement noise standard deviation.
gyr_n: 0.04         # gyroscope measurement noise standard deviation.
acc_w: 0.00004        # accelerometer bias random work noise standard deviation.
gyr_w: 2.0e-6       # gyroscope bias random work noise standard deviation.
g_norm: 9.81007       #

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/lenovo/output/KITTI/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
